<project name="Demo Server" default="server" basedir=".">

    <!-- PROPERTIES -->
    <!-- Directory where the Java compiler puts .class files -->
    <!-- ********** -->	
    
    <!-- Directory paths for the java server, javascript, and dest dir for the student copy -->
    <property name="port.arg" value="8081"/>
    <property name="web.arg" value="gameplay"/>
    <property name="options.arg" value="ug"/>
    <property name="host.arg" value="localhost"/>
    <property name="mock.arg" value="false"/>
    <property name="plugin.arg" value="sql"/>
    <property name="deltas.arg" value="10"/>
    
    <!-- Input folders -->  
    <property name="java.dir" value="java"/>
    <property name="modeltest.dir" value="modeltests"/>
    <property name="java.src.dir" value="${java.dir}/src"/>
    <property name="java.lib.dir" value="${java.dir}/lib"/>
    <!-- JavaScript source folder -->
    <property name="javascript.dir" value="gameplay/js"/>
    
    <!-- Base output folder -->
    <property name="dest.dir" value="docs"/>
    <!-- Javadoc output folder -->
    <property name="javadoc.dir" value="${dest.dir}/java"/>
    <!-- YUIDoc output folder -->
    <property name="yuidoc.dir" value="${dest.dir}/javascript"/>
    <!-- Jar file path/name from here -->
    <property name="demo.dir" value="demo"/>
    <property name="server.jar.file" value="${demo.dir}/server.jar"/>
    <property name="client.jar.file" value="${demo.dir}/client.jar"/>
  
    <!-- CLASSPATHS -->
    <!-- ********** -->
    <path id="java.lib.classpath">
        <fileset dir="${java.lib.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>
    <path id="all-classpath">
        <path refid="java.lib.classpath"/>
        <pathelement location="${java.build}"/>
    </path>
	
    <!-- TARGETS -->
    <!-- ******* -->
     
    <target name="server" description="Runs the demo server">
        <java jar="${server.jar.file}" fork="true" dir="${demo.dir}">
            <arg value="${port.arg}"/>
            <arg value="${web.arg}"/>
            <arg value="${options.arg}"/>
            <assertions>
                <enable/>
            </assertions>
        </java>
    </target>
    
    <target name="client" description="Runs the demo client">
        <java jar="${client.jar.file}" fork="true" dir="${demo.dir}">
            <assertions>
                <enable/>
            </assertions>
        </java>
    </target>
    
    <target name="make-java-doc" description="Generate the Java docs">
        <echo> Making Java documentation </echo>
        <delete dir="${javadoc.dir}"/>
        <javadoc destdir="${javadoc.dir}" Package="true">
            <classpath refid="java.lib.classpath" />
            <packageset dir="${java.src.dir}">
                <include name="client/**"/>
                <include name="shared/**"/>
            </packageset>
        </javadoc>
    </target>
    
    <!--
    <target name="make-js-doc" description="Generate the JavaScript docs">
        <echo> Making JavaScript documentation </echo>
        <exec executable="yuidoc">
            <arg value="-o"/>
            <arg value="${yuidoc.dir}"/>
            <arg value="${javascript.dir}"/>
        </exec>
        </target>
    -->

    <property name="java.dir" location="java"/>
    <property name="java.src" location="${java.dir}/src"/>
    <property name="java.images" location="${java.dir}/images"/>
     <property name="java.docs" location="${java.dir}/docs"/>
    <property name="java.build" location="${java.dir}/build"/>
    <property name="java.dist" location="${java.dir}/dist"/>
    <property name="java.lib" location="${java.dir}/lib"/>
 
    <target name="init" description="create build directories">
        <tstamp/>
        <mkdir dir="${java.build}"/>
        <mkdir dir="${java.dist}"/>
    </target>
		
    <target name="clean" description="clean build files" >
        <delete dir="${java.build}"/>
        <delete dir="${java.dist}"/>
    </target>
    
    <target name="compile" depends="init" description="compile the source" >
        <javac srcdir="${java.src}" destdir="${java.build}" debug="true" includeantruntime="true">
            <classpath refid="java.lib.classpath" />
            <!--compilerarg value="-Xlint"/-->
        </javac>
        <javac srcdir="${modeltest.dir}" destdir="${java.build}" debug="true" includeantruntime="true">
            <classpath refid="java.lib.classpath" />
            <!--compilerarg value="-Xlint"/-->
        </javac>
    </target>
	
    <target name="package" depends="compile" description="package the jar file" >
        <mkdir dir="${java.dist}/lib"/>
        <copy todir="${java.dist}/lib">
            <fileset dir="${java.lib}">
                <include name="**"/>
            </fileset>
        </copy>
        <mkdir dir="${java.dist}/images"/>
        <copy todir="${java.dist}/images">
            <fileset dir="${java.images}">
                <include name="**"/>
            </fileset>
        </copy>
        <mkdir dir="${java.dist}/docs"/>
        <copy todir="${java.dist}/docs">
            <fileset dir="${java.docs}">
                <include name="**"/>
            </fileset>
        </copy>
        <jar jarfile="${java.dist}/catan-client.jar" basedir="${java.build}">
            <manifest>
                <attribute name="Main-Class" value="client.main.Catan"/>
                <attribute name="Class-Path" 
                           value="lib/gson-2.2.4.jar" />
            </manifest>
        </jar>
        <jar jarfile="${java.dist}/catan-server.jar" basedir="${java.build}">
            <manifest>
                <attribute name="Main-Class" value="server.main.Server"/>
                <attribute name="Class-Path" 
                           value="lib/gson-2.2.4.jar" />
            </manifest>
        </jar>
    </target>
     	
    <!-- ant our-client {-Dhost.arg=<SERVER_HOST>} {-Dport.arg=<SERVER_PORT_NUMBER>} -->
    <!-- EXAMPLE: ant our-client -Dhost.arg=localhost -Dport.arg=8081 -->
    <!-- If host and/or port number are omitted, default values are used. -->
    <!-- EXAMPLE: ant our-client -->
    <target name="our-client" depends="package" description="compiles, packages, and runs the student client">
        <java jar="${java.dist}/catan-client.jar" dir="${java.dist}" fork="yes">
            <sysproperty key="com.sun.management.jmxremote" value=""/>
            <arg value="${host.arg}"/>
            <arg value="${port.arg}"/>
            <assertions>
                <enable/>
            </assertions>
        </java>
    </target>
    
    <target name="our-server" depends="package" description="compiles, packages, and runs the student client">
        <java jar="${java.dist}/catan-server.jar" dir="${java.dist}" fork="yes">
            <sysproperty key="com.sun.management.jmxremote" value=""/>
            <arg value="${port.arg}"/>
            <arg value="${mock.arg}"/>
            <arg value="${plugin.arg}"/>
            <arg value="${deltas.arg}"/>
            <assertions>
                <enable/>
            </assertions>
        </java>
    </target>
    <!-- EXAMPLE: ant client -->
    <target name="start-client" depends="compile" description="run client using server on specified host and port">
        <java classname="client.main.Catan" fork="yes">
            <classpath>
                <pathelement location="${java.lib.dir}/gson-2.2.4.jar"/>
                <pathelement location="${java.build}" />
            </classpath>
            <arg value="${host.arg}"/>
            <arg value="${port.arg}"/>
            <assertions>
                <enable/>
            </assertions>
        </java>
    </target>
    <target name="test" depends="compile">
        <junit>
            <classpath>
                <pathelement location="${java.build}" />    
                <pathelement location="${java.lib.dir}/junit-4.12.jar"/>
                <pathelement location="${java.lib.dir}/hamcrest-core-1.3.jar"/>
                <pathelement location="${java.lib.dir}/org.apache.commons.io.jar"/>
                <pathelement location="${java.lib.dir}/gson-2.2.4.jar"/>
            </classpath>    
            <batchtest>
                <fileset dir="${modeltest.dir}">
                    <include name="**/*Test*" />
                </fileset>
            </batchtest>
            <formatter type="brief" usefile="false"/>
        </junit>
    </target> 
    <target name="server-test" depends="compile">
        <junit>
            <classpath>
                <pathelement location="${java.build}" />    
                <pathelement location="${java.lib.dir}/junit-4.12.jar"/>
                <pathelement location="${java.lib.dir}/hamcrest-core-1.3.jar"/>
                <pathelement location="${java.lib.dir}/org.apache.commons.io.jar"/>
                <pathelement location="${java.lib.dir}/gson-2.2.4.jar"/>
            </classpath>    
            <batchtest>
                <fileset dir="${modeltest.dir}">
                    <include name="server/command/*Test*" />
                </fileset>
            </batchtest>
            <formatter type="brief" usefile="false"/>
        </junit>
    </target>    
</project>

